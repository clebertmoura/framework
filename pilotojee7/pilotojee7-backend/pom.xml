<?xml version="1.0" encoding="UTF-8"?>
<!-- JBoss, Home of Professional Open Source Copyright 2013, Red Hat, Inc. 
	and/or its affiliates, and individual contributors by the @authors tag. See 
	the copyright.txt in the distribution for a full listing of individual contributors. 
	Licensed under the Apache License, Version 2.0 (the "License"); you may not 
	use this file except in compliance with the License. You may obtain a copy 
	of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->
<project xmlns="http://maven.apache.org/POM/4.0.0" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<artifactId>pilotojee7-backend</artifactId>
	<packaging>war</packaging>
	<name>pilotojee7-backend</name>
	
	<parent>
		<groupId>br.com.framework</groupId>
		<artifactId>pilotojee7</artifactId>
		<version>3.0.1-SNAPSHOT</version>
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<!-- JBoss dependency versions -->
		<version.wildfly.maven.plugin>1.2.1.Final</version.wildfly.maven.plugin>

		<!-- Define the version of the JBoss BOMs we want to import to specify tested stacks. -->
		<version.jboss.bom>8.2.2.Final</version.jboss.bom>

		<version.eclipselink>2.7.1</version.eclipselink>

		<!-- other plugin versions -->
		<version.compiler.plugin>3.1</version.compiler.plugin>
		<version.surefire.plugin>2.16</version.surefire.plugin>
		<version.war.plugin>2.5</version.war.plugin>

		<!-- maven-compiler-plugin -->
		<maven.compiler.target>1.8</maven.compiler.target>
		<maven.compiler.source>1.8</maven.compiler.source>

		<sql-maven-plugin.delimiter>;</sql-maven-plugin.delimiter>
		<sql.create.script>01-create.sql</sql.create.script>

		<!-- Versões de dependências gerais -->
		<version.solrj>4.10.4</version.solrj>
		<version.commons-lang3>3.4</version.commons-lang3>
		<version.commons-codec>1.10</version.commons-codec>
		
		<celerio-maven-plugin.outputDir>${project.basedir}</celerio-maven-plugin.outputDir>
		<celerio-maven-plugin.configuration>${project.basedir}/../config/celerio-maven-plugin/celerio-maven-plugin.xml</celerio-maven-plugin.configuration>
		<celerio-maven-plugin.packs.configuration>${project.basedir}/src/main/config/celerio-maven-plugin/celerio-template-packs.xml</celerio-maven-plugin.packs.configuration>

		<app.basedir>/sistemas/AjuizamentoEletronico/processamento_lotes</app.basedir>

	</properties>


	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.wildfly.bom</groupId>
				<artifactId>jboss-javaee-7.0-with-tools</artifactId>
				<version>${version.jboss.bom}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<!-- Frameworks -->
		<dependency>
			<groupId>br.com.framework</groupId>
			<artifactId>framework-util</artifactId>
			<version>${version.framework}</version>
		</dependency>
		<dependency>
			<groupId>br.com.framework</groupId>
			<artifactId>framework-domain</artifactId>
			<version>${version.framework}</version>
		</dependency>
		<dependency>
			<groupId>br.com.framework</groupId>
			<artifactId>framework-search</artifactId>
			<version>${version.framework}</version>
		</dependency>
		<dependency>
			<groupId>br.com.framework</groupId>
			<artifactId>framework-model</artifactId>
			<version>${version.framework}</version>
		</dependency>
		<dependency>
			<groupId>br.com.framework</groupId>
			<artifactId>framework-service</artifactId>
			<version>${version.framework}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.solr</groupId>
			<artifactId>solr-solrj</artifactId>
			<version>${version.solrj}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>${version.commons-lang3}</version>
		</dependency>
		<dependency>
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
			<version>${version.commons-codec}</version>
		</dependency>
		<dependency>
			<groupId>org.freemarker</groupId>
			<artifactId>freemarker</artifactId>
			<version>2.3.24-incubating</version>
		</dependency>

		<dependency>
			<groupId>org.eclipse.persistence</groupId>
			<artifactId>eclipselink</artifactId>
			<version>${version.eclipselink}</version>
			<exclusions>
				<exclusion>
					<artifactId>commonj.sdo</artifactId>
					<groupId>commonj.sdo</groupId>
				</exclusion>
			</exclusions>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>18.0</version>
		</dependency>

		<dependency>
			<groupId>org.hibernate.validator</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>6.0.3.Final</version>
			<scope>compile</scope>
		</dependency>

		<!-- Keycloak -->
		<dependency>
			<groupId>org.keycloak</groupId>
			<artifactId>keycloak-core</artifactId>
			<version>3.1.0.Final</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.keycloak</groupId>
			<artifactId>keycloak-adapter-core</artifactId>
			<version>3.1.0.Final</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.keycloak</groupId>
			<artifactId>keycloak-wildfly-subsystem</artifactId>
			<version>3.1.0.Final</version>
			<scope>provided</scope>
		</dependency>

		<!-- <dependency>
			<groupId>org.eclipse.persistence</groupId>
			<artifactId>org.eclipse.persistence.jpars</artifactId>
			<version>${version.eclipselink}</version>
		</dependency> -->
		<dependency>
			<groupId>org.jboss</groupId>
			<artifactId>jboss-vfs</artifactId>
			<version>3.1.0.Final</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.logging</groupId>
			<artifactId>jboss-logging</artifactId>
			<version>3.1.0.GA</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>javax</groupId>
			<artifactId>javaee-api</artifactId>
			<version>7.0</version>
			<scope>provided</scope>
		</dependency>

		<!-- Needed for running tests (you may also use TestNG) -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Optional, but highly recommended -->
		<!-- Arquillian allows you to test enterprise code such as EJBs and Transactional(JTA)  JPA from JUnit/TestNG -->
		<dependency>
			<groupId>org.jboss.arquillian.junit</groupId>
			<artifactId>arquillian-junit-container</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.arquillian.protocol</groupId>
			<artifactId>arquillian-protocol-servlet</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>com.jaxio.celerio</groupId>
			<artifactId>celerio-engine</artifactId>
			<version>${celerio-maven-plugin.version}</version>
			<scope>provided</scope>
			<exclusions>
				<exclusion>
					<groupId>*</groupId>
					<artifactId>*</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		
		<dependency>
            <groupId>org.jboss.resteasy</groupId>
            <artifactId>resteasy-multipart-provider</artifactId>
            <version>${resteasy.version}</version>
            <scope>provided</scope>
        </dependency>

		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.7.4</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-commons</artifactId>
			<version>2.0.5.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>3.0.2.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.reflections</groupId>
			<artifactId>reflections</artifactId>
			<version>0.9.10</version>
		</dependency>
		<dependency>
			<groupId>br.com.framework</groupId>
			<artifactId>celerio-pack-backend</artifactId>
			<version>${version.framework}</version>
		</dependency>
	
	</dependencies>

	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
			<resource>
				<directory>src/main/sql/h2</directory>
				<filtering>false</filtering>
			</resource>
		</resources>

		<!-- Maven will append the version to the finalName (which is the name 
			given to the generated war, and hence the context root) -->
		<finalName>${project.artifactId}</finalName>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>native2ascii-maven-plugin</artifactId>
				<version>1.0-alpha-1</version>
				<executions>
					<execution>
						<goals>
							<goal>native2ascii</goal>
						</goals>
						<phase>generate-resources</phase>
						<configuration>
							<encoding>UTF8</encoding>
							<src>src/main/resources</src>
							<dest>src/main/resources</dest>
							<includes>*.properties-utf8</includes>
							<ext>.properties</ext>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>com.sun</groupId>
						<artifactId>tools</artifactId>
						<version>1.8.0</version>
						<scope>system</scope>
						<systemPath>${java.home}/../lib/tools.jar</systemPath>
					</dependency>
				</dependencies>
			</plugin>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>${version.war.plugin}</version>
				<configuration>
					<failOnMissingWebXml>false</failOnMissingWebXml>
				</configuration>
			</plugin>
			<!-- The WildFly plugin deploys your war to a local WildFly container -->
			<!-- To use, run: mvn package wildfly:deploy -->
			<plugin>
				<groupId>org.wildfly.plugins</groupId>
				<artifactId>wildfly-maven-plugin</artifactId>
			</plugin>

			<plugin>
				<!-- http://maven.apache.org/plugins/maven-resources-plugin/ -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.7</version>
				<configuration>
					<delimiters>
						<delimiter>@*@</delimiter>
					</delimiters>
					<useDefaultDelimiters>false</useDefaultDelimiters>
					<nonFilteredFileExtensions>
						<nonFilteredFileExtension>xls</nonFilteredFileExtension>
						<nonFilteredFileExtension>xlsx</nonFilteredFileExtension>
						<nonFilteredFileExtension>pdf</nonFilteredFileExtension>
					</nonFilteredFileExtensions>
				</configuration>
			</plugin>

			<plugin>
				<!-- http://mojo.codehaus.org/build-helper-maven-plugin/ -->
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>1.9.1</version>
				<executions>
					<execution>
						<id>Adding generated java folder to build</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>src/main/java</source>
								<source>src/main/generated-java</source>
							</sources>
						</configuration>
					</execution>
					<execution>
						<id>Adding generated java test location to test build</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-test-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>src/test/java</source>
								<source>src/test/generated-java</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Compiler plugin enforces Java compatibility and activates annotation processors -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>${maven.compiler.source}</source>
					<target>${maven.compiler.target}</target>
				</configuration>
			</plugin>
			
		</plugins>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.codehaus.mojo
										</groupId>
										<artifactId>
											native2ascii-maven-plugin
										</artifactId>
										<versionRange>
											[1.0-alpha-1,)
										</versionRange>
										<goals>
											<goal>native2ascii</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<profiles>
		<profile>
			<!-- The default profile skips all tests, though you can tune it to run 
				just unit tests based on a custom pattern -->
			<!-- Seperate profiles are provided for running all tests, including Arquillian 
				tests that execute in the specified container -->
			<id>default</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>${version.surefire.plugin}</version>
						<configuration>
							<skip>true</skip>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>

			<!-- An optional Arquillian testing profile that executes tests in your 
				WildFly instance -->
			<!-- This profile will start a new WildFly instance, and execute the test, 
				shutting it down when done -->
			<!-- Run with: mvn clean test -Parq-wildfly-managed -->
			<id>arq-wildfly-managed</id>
			<dependencies>
				<dependency>
					<groupId>org.wildfly</groupId>
					<artifactId>wildfly-arquillian-container-managed</artifactId>
					<scope>test</scope>
				</dependency>
			</dependencies>
		</profile>

		<profile>
			<!-- An optional Arquillian testing profile that executes tests in a remote 
				WildFly instance -->
			<!-- Run with: mvn clean test -Parq-wildfly-remote -->
			<id>arq-wildfly-remote</id>
			<dependencies>
				<dependency>
					<groupId>org.wildfly</groupId>
					<artifactId>wildfly-arquillian-container-remote</artifactId>
					<scope>test</scope>
				</dependency>
			</dependencies>
		</profile>

		<profile>
			<!-- When built in OpenShift the 'openshift' profile will be used when 
				invoking mvn. -->
			<!-- Use this profile for any OpenShift specific customization your app 
				will need. -->
			<!-- By default that is to put the resulting archive into the 'deployments' 
				folder. -->
			<!-- http://maven.apache.org/guides/mini/guide-building-for-different-environments.html -->
			<id>openshift</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-war-plugin</artifactId>
						<version>${version.war.plugin}</version>
						<configuration>
							<outputDirectory>deployments</outputDirectory>
							<warName>ROOT</warName>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>


		<profile>
			<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
			<!-- Drop and recreate the database -->
			<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
			<id>db</id>
			<build>
				<defaultGoal>initialize</defaultGoal>
				<plugins>
					<plugin>
						<!-- http://mojo.codehaus.org/sql-maven-plugin/ -->
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>sql-maven-plugin</artifactId>
						<version>1.5</version>
						<executions>
							<execution>
								<id>Create and initialize the database</id>
								<phase>initialize</phase>
								<configuration>
									<driver>${jdbc.driver}</driver>
									<url>${jdbc.url}</url>
									<username>${jdbc.user}</username>
									<password>${jdbc.password}</password>
									<autocommit>true</autocommit>
									<encoding>UTF-8</encoding>
									<printResultSet>true</printResultSet>
									<onError>continue</onError>
									<delimiter>${sql-maven-plugin.delimiter}</delimiter>
									<orderFile>ascending</orderFile>
									<fileset>
										<basedir>${project.basedir}</basedir>
										<includes>
											<include>src/main/config/sql/${sql.create.script}</include>
										</includes>
									</fileset>
								</configuration>
								<goals>
									<goal>execute</goal>
								</goals>
							</execution>
						</executions>
						<dependencies>
							<dependency>
								<groupId>${jdbc.groupId}</groupId>
								<artifactId>${jdbc.artifactId}</artifactId>
								<version>${jdbc.version}</version>
							</dependency>
						</dependencies>
					</plugin>
				</plugins>
			</build>
		</profile>
		
		<profile>
			<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
			<!-- Generate the code using Celerio -->
			<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
			<id>gen</id>
			<build>
				<defaultGoal>generate-sources</defaultGoal>
				<plugins>
					<plugin>
						<groupId>com.jaxio.celerio</groupId>
						<artifactId>celerio-maven-plugin</artifactId>
						<version>${celerio-maven-plugin.version}</version>
						<executions>
							<execution>
								<id>Generates files using the extracted database schema.</id>
								<goals>
									<goal>generate</goal>
								</goals>
								<configuration>
									<xmlMetadata>${project.basedir}/../config/celerio-maven-plugin/metadata.xml</xmlMetadata>
								</configuration>
							</execution>
						</executions>
						<dependencies>
							<dependency>
								<groupId>br.com.framework</groupId>
								<artifactId>celerio-pack-backend</artifactId>
								<version>${version.framework}</version>
							</dependency>
						</dependencies>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
			<!-- Delete code generated by Celerio -->
			<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
			<id>cleanGen</id>
			<build>
				<plugins>
					<plugin>
						<groupId>com.jaxio.celerio</groupId>
						<artifactId>celerio-maven-plugin</artifactId>
						<version>${celerio-maven-plugin.version}</version>
						<executions>
							<execution>
								<id>Delete previously generated files (use .celerio/ folder)</id>
								<goals>
									<goal>cleanGenerated</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
	
</project>
