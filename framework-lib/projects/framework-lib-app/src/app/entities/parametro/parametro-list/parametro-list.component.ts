//
// Source code generated by Celerio, a Jaxio product.
// Documentation: http://www.jaxio.com/documentation/celerio/
// Follow us on twitter: @jaxiosoft
// Need commercial support ? Contact us: info@jaxio.com
// Template celerio-pack-frontend:src/app/entities/entity/entity-list/entity-list.component.ts.e.vm
// Template is part of Open Source Project: https://github.com/jaxio/javaee-lab
//
import { Component, Input } from '@angular/core';
import { AppEntityListComponent } from '../../../core/components/app-entity-list.component';
import { Router } from '@angular/router';
import { FormBuilder, FormGroup } from '@angular/forms';
import { MessageService, FilterMetadata, Operator } from 'framework-lib';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { Parametro } from '../parametro';
import { ParametroService } from '../parametro.service';
import { ParametroDataSource } from '../parametro.datasource';
import { EnumeratorsService } from '../../enumerators.service';
import { TranslateService } from '@ngx-translate/core';

@Component({
  selector: 'app-parametro-list',
  templateUrl: './parametro-list.component.html',
  styleUrls: ['./parametro-list.component.scss']
})
export class ParametroListComponent extends AppEntityListComponent<Parametro, ParametroService> {

  public isFiltersCollapsed = true;


  constructor(
    protected router: Router,
    protected messageService: MessageService,
    protected confirmDeleteDialog: NgbModal,
    protected fb: FormBuilder,
    protected translate: TranslateService,
    protected enumeratorsService: EnumeratorsService,
    protected entityService: ParametroService) {
    super(router, messageService, confirmDeleteDialog, fb, translate, enumeratorsService, entityService, 'Parametro');
  }

  protected async loadEnumValues() {
    this.cacheEnums['TipoParametro'] = await this.enumeratorsService.getTipoParametroValues().toPromise();
  }

  protected setupEntityDataSource(): void {
    this.dataSource = new ParametroDataSource(this.paginator, this.sort, this.entityService);
  }

  /**
   * Cria os FormGroup para os filtros de pesquisa.
   */
  protected createSearchFormGroup(): FormGroup {
    return this.fb.group({
      descricao: [null],
      valor: [null],
      chave: [null],
      dataHoraAlteracao: [null],
      tipoParametro: [null],
    });
  }

  /**
   * Configura as colunas a serem exibidas no datatable.
   */
  protected setupDatatableFields(): void {
    this.displayedColumns = [
      'descricao',
      'valor',
      'chave',
      'dataHoraAlteracao',
      'tipoParametro',
      'actions'
    ];
  }

  /**
   * Inicializa os campos do filtro com os valores dos campos no FormGroup.
   */
  protected setupFilterFields(): void {
    this.setupFilterField('descricao', 'descricao', Operator.LI);
    this.setupFilterField('valor', 'valor', Operator.LI);
    this.setupFilterField('chave', 'chave', Operator.LI);
    this.setupFilterField('dataHoraAlteracao', 'dataHoraAlteracao', Operator.LI);
    this.setupFilterField('tipoParametro', 'tipoParametro', Operator.LI);
  }


}
