//
// Source code generated by Celerio, a Jaxio product.
// Documentation: http://www.jaxio.com/documentation/celerio/
// Follow us on twitter: @jaxiosoft
// Need commercial support ? Contact us: info@jaxio.com
// Template celerio-pack-frontend:src/app/entities/entity/entity-detail/entity-detail.component.ts.e.vm
// Template is part of Open Source Project: https://github.com/jaxio/javaee-lab
//
import { Component, Input } from '@angular/core';
import { EntityDetailComponent } from '../../../framework/components/entity-detail.component';
import { ActivatedRoute, Router } from '@angular/router';
import { Location } from '@angular/common';
import { MessageService } from '../../../util/message.service';
import { EnumeratorsService } from '../../enumerators.service';

import { Usuario } from '../usuario';
import { UsuarioService } from '../usuario.service';

@Component({
  selector: 'app-usuario-detail',
  templateUrl: './usuario-detail.component.html',
  styleUrls: ['./usuario-detail.component.scss']
})
export class UsuarioDetailComponent extends EntityDetailComponent<Usuario, UsuarioService> {



    statusValues: any[];

    constructor(protected route: ActivatedRoute, protected router: Router, protected messageService: MessageService,
        protected location: Location,
        protected enumeratorsService: EnumeratorsService,
        protected entityService: UsuarioService) {
        super(route, router, messageService, location, enumeratorsService, entityService, 'Usuario');
    }

    protected loadEnumValues(): void {
        this.statusValues = [];
        this.enumeratorsService.getStatusValues().subscribe(
            enumItems => this.statusValues = enumItems,
            error => this.messageService.error('Não foi possível carregar os valores do campo status', error)
        );

    }

    protected loadEntityRelations(): void {
    }



    /**
     * Refresh the form to display the download link.
     * TODO: sthg smarter.
     */
    onFotoBinaryUpload(event: any) {
        this.entityService.getEntity(this.entity.id)
            .subscribe(
                entity => this.entity = entity,
                error =>  this.messageService.error('onFotoBinaryUpload error', error)
            );
    }

}


