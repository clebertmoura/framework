$output.file("src/app/entities/${entity.model.type.toLowerCase()}/${entity.model.type.toLowerCase()}.ts")##
#macro(tstype $attr)
#if($attr.isString()): string#elseif($attr.isNumeric()): number#elseif($attr.isBoolean()): boolean#elseif($attr.isDate()): Date#end
#end
## --------------- Composite PK
#if($entity.hasCompositePk())
import { $entity.primaryKey.type } from './$entity.primaryKey.type.toLowerCase()';
#end
#set($imports = [])
## --------------- X to One
#foreach ($relation in $entity.xToOne.list)
#if(!$relation.to.type.equals($entity.model.type) && !$imports.contains($relation.to.type))
import { ${relation.to.type} } from '../${relation.toEntity.model.type.toLowerCase()}/${relation.toEntity.model.type.toLowerCase()}';
#set($temp = $imports.add($relation.to.type))
#end
#end
## --------------- inverse X to One
#foreach ($relation in $entity.inverseOneToOne.list)
#if(!$relation.to.type.equals($entity.model.type) && !$imports.contains($relation.to.type))
import { ${relation.to.type} } from '../${relation.toEntity.model.type.toLowerCase()}/${relation.toEntity.model.type.toLowerCase()}';
#set($temp = $imports.add($relation.to.type))
#end
#end
## --------------- Many to Many
#foreach ($relation in $entity.manyToMany.list)
#if(!$relation.to.type.equals($entity.model.type) && !$imports.contains($relation.to.type))
import { ${relation.to.type} } from '../${relation.toEntity.model.type.toLowerCase()}/${relation.toEntity.model.type.toLowerCase()}';
#set($temp = $imports.add($relation.to.type))
#end
#end

#if ($entity.isEntityAudited()) 
import { BaseEntityAudited } from 'framework-lib';
#else
import { BaseEntity } from 'framework-lib';
#end

export class $entity.model.type extends#if($entity.isEntityAudited()) BaseEntityAudited#else BaseEntity#end {
## --------------- Compiste PK
#if ($entity.hasCompositePk())
    ${identifiableProperty.var}: $entity.primaryKey.type = new ${entity.primaryKey.type}();
#end
## --------------- Raw attributes (except the one involved in XtoOneRelation)
#foreach ($attribute in $entity.nonCpkAttributes.list)
#if ($velocityCount == 1)
    // Raw attributes
#end
#if(!$attribute.isInPk() && !$attribute.isVersion() && !$attribute.isAuditEntityAttribute() && !$attribute.isInFk() && !$attribute.getColumnConfig().getFieldName().equals("status"))
    ${attribute.var}#tstype($attribute);
#end
#end
## --------------- X to One (except inverse one to one)
#foreach ($relation in $entity.forwardXToOne.list)
#if ($velocityCount == 1)
    // x-to-one
#end
    ${relation.to.var}: $relation.to.type;
#end
## --------------- many to many
#foreach ($relation in $entity.manyToMany.list)
#if ($velocityCount == 1)
    // many-to-many
#end
    ${relation.to.vars}: ${relation.to.type}[];
#end

    constructor(json?: any, depth?: number) {
        super(json, depth);
    }

    /**
     * Converter um array de json em um array de objetos.
     */
    static toArray(jsons: any[], depth?: number): ${entity.model.type}[] {
        const entities: ${entity.model.type}[] = [];
        if (jsons != null) {
            for (const json of jsons) {
                entities.push(new ${entity.model.type}(json, depth));
            }
        }
        return entities;
    }

    /**
     * Responsavel por carregar os campos
     */
    protected loadEntityFields(json?: any, depth?: number): void {
        super.loadEntityFields(json);
#if ($entity.hasCompositePk())
        this.${identifiableProperty.var} = new ${entity.primaryKey.type}(json.$identifiableProperty.var);
#end
#foreach ($attribute in $entity.nonCpkAttributes.list)
#if(!$attribute.isInPk() && !$attribute.isVersion() && !$attribute.isAuditEntityAttribute() && !$attribute.isInFk() && !$attribute.getColumnConfig().getFieldName().equals("status") && !$attribute.isBinary())
#if ($attribute.isDate())
        if (json.$attribute.var != null) {
            this.$attribute.var = new Date(json.$attribute.var);
        }
#else
        this.${attribute.var} = json.$attribute.var;
#end
#end
#end
        if (depth && depth-- > 0) {
## --------------- X to One (except inverse one to one)
#foreach ($relation in $entity.xToOne.list)
            if (json.$relation.to.var != null) {
                this.$relation.to.var = new ${relation.to.type}(json.$relation.to.var, depth);
            }
#end
## --------------- many to many
#foreach ($relation in $entity.manyToMany.list)
            if (json.$relation.to.vars != null) {
                this.$relation.to.vars = ${relation.to.type}.toArray(json.$relation.to.vars, depth);
            }
#end
        }
    }
}
