$output.java($entity.resource)##

import javax.xml.bind.annotation.XmlRootElement;

$output.require($entity.model)##
#if ($entity.isEntityAudited()) 
$output.require("br.com.framework.service.impl.BaseEntityAuditedResourceImpl")##
#else
$output.require("br.com.framework.service.impl.BaseEntityResourceImpl")##
#end


/**
 * Resource da entidade ${entity.model.type}.
 */
@XmlRootElement
#if($entity.isRoot())
public class $output.currentClass extends#if ($entity.isEntityAudited()) BaseEntityAuditedResourceImpl#else BaseEntityResourceImpl#end<$entity.primaryKey.type, $entity.model.type> {
#else
$output.require($entity.parent.resource)##
public class $output.currentClass extends $entity.parent.resource.type {
#end

	private static final long serialVersionUID = 1L;
	
#if($entity.isRoot() && $entity.primaryKey.isComposite())
$output.require($entity.primaryKey)##
    // Composite primary key
    private $entity.primaryKey.type $entity.primaryKey.var;
#end
#foreach ($attribute in $entity.nonCpkAttributes.list)
#if(!$attribute.isInPk() && !$attribute.isVersion() && !$attribute.isAuditEntityAttribute() && !$attribute.isInFk() && !$attribute.getColumnConfig().getFieldName().equals("status"))
#if ($attribute.isEnum())
$output.require("${attribute.enumModel.packageName}.enums.${attribute.enumModel.type}")##
    // Import enums
#else
$output.require($attribute)##
#end
    private $attribute.type $attribute.var;
#end
#end
#foreach ($relation in $entity.xToOne.list)
    private $relation.toEntity.resource.type $relation.to.var;
#end
## --------------- Many to many
#foreach ($manyToMany in $entity.manyToMany.list)
$output.require($entity.collectionType.fullType)##
$output.require($entity.collectionType.implementationFullType)##
$output.require($manyToMany.to)##
    private ${entity.collectionType.type}<$manyToMany.toEntity.resource.type> $manyToMany.to.vars = new ${entity.collectionType.implementationType}<$manyToMany.toEntity.resource.type>();
#end
## --------------- One to many
#foreach ($oneToMany in $entity.oneToMany.list)
$output.require($entity.collectionType.fullType)##
$output.require($entity.collectionType.implementationFullType)##
$output.require($oneToMany.to)##
    private ${entity.collectionType.type}<$oneToMany.toEntity.resource.type> $oneToMany.to.vars = new ${entity.collectionType.implementationType}<$oneToMany.toEntity.resource.type>();
#end

    public $entity.resource.type () {
    	super();
	}

    public $entity.resource.type ($entity.model.type entity) {
    	super(entity);
		if (entity != null) {
		
#foreach ($attribute in $entity.nonCpkAttributes.list)
#if(!$attribute.isInPk() && !$attribute.isVersion() && !$attribute.isAuditEntityAttribute() && !$attribute.isInFk() && !$attribute.getColumnConfig().getFieldName().equals("status"))
        ${attribute.setter}(entity.${attribute.getter}());
#end
#end
        }
	}


#foreach ($attribute in $entity.nonCpkAttributes.list)
#if(!$attribute.isInPk() && !$attribute.isVersion() && !$attribute.isAuditEntityAttribute() && !$attribute.isInFk() && !$attribute.getColumnConfig().getFieldName().equals("status"))
    // -- [${attribute.var}] ------------------------
#if($attribute.hasComment())$attribute.javadoc#end
#if ($attribute.isSimplePk())
    @Override
#end
    public $attribute.type ${attribute.getter}() {
        return $attribute.var;
    }
#if ($attribute.isSetterAccessibilityPublic())

#if ($attribute.isSimplePk())
    @Override
#end
    public void ${attribute.setter}($attribute.type $attribute.var) {
        this.$attribute.var = $attribute.var;
    }

#else

    private void ${attribute.setter}($attribute.type $attribute.var) {
        this.$attribute.var = $attribute.var;
    }
#end
#if($attribute.isSimplePk())

    @Override
    $output.dynamicAnnotation("javax.persistence.Transient")
    public boolean ${attribute.has}() {
        return $attribute.var != null#if ($attribute.isString() && !$attribute.isEnum()) && !${attribute.var}.isEmpty()#end;
    }
#end
#end
#end

## --------------- Many to one
#foreach ($relation in $entity.manyToOne.list)
#if ($velocityCount == 1)

    // -----------------------------------------------------------------
    // Many to One support
    // -----------------------------------------------------------------
#end

    public $relation.toEntity.resource.type ${relation.to.getter}() {
        return $relation.to.var;
    }

    public void ${relation.to.setter}($relation.toEntity.resource.type $relation.to.var) {
        this.$relation.to.var = $relation.to.var;
#if (!$relation.isIntermediate())        
#foreach ($attributePair in $relation.attributePairs)
#if ($attributePair.fromAttribute.isInCpk() && $attributePair.toAttribute.isInCpk())
         ${identifiableProperty.getter}().${attributePair.fromAttribute.setter}($relation.to.var != null ? ${relation.to.var}.${identifiableProperty.getter}().${attributePair.toAttribute.getter}() : null);
#end
#end
#end
    }

#end

## --------------- Many to Many
#foreach ($relation in $entity.manyToMany.list)
#if ($velocityCount == 1)

    // -----------------------------------------------------------------
    // Many to Many
    // -----------------------------------------------------------------
#end

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
    // many-to-many: $relation.fromEntity.model.var ==> $relation.to.vars
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

    /**
     * Returns the {@link #$relation.to.vars} list.
     */
    public ${entity.collectionType.type}<$relation.toEntity.resource.type> ${relation.to.getters}() {
        return $relation.to.vars;
    }

    /**
     * Set the {@link #$relation.to.vars} list.
     *
     * @param $relation.to.vars the list of $relation.to.type
     */
    public void ${relation.to.setters}(${entity.collectionType.type}<$relation.toEntity.resource.type> $relation.to.vars) {
        this.$relation.to.vars = $relation.to.vars;
    }

#end

## --------------- One to many
#foreach ($relation in $entity.oneToMany.list)
#if ($velocityCount == 1)

    // -----------------------------------------------------------------
    // One to Many support
    // -----------------------------------------------------------------
#end

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // one to many: $relation.fromEntity.model.var ==> $relation.to.vars
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    public ${entity.collectionType.type}<$relation.toEntity.resource.type> ${relation.to.getters}() {
        return $relation.to.vars;
    }

    /**
     * Set the {@link $relation.to.type} list.
     * if you want to preserve referential integrity at the object level.
     *
     * @param $relation.to.vars the list to set
     */
    public void ${relation.to.setters}(${entity.collectionType.type}<$relation.toEntity.resource.type> $relation.to.vars) {
        this.$relation.to.vars = $relation.to.vars;
    }
    

#end

}