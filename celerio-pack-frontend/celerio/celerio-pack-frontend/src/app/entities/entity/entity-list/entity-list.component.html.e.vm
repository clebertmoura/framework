$output.file("src/app/entities/${entity.model.type.toLowerCase()}/${entity.model.type.toLowerCase()}-list/${entity.model.type.toLowerCase()}-list.component.html")##
<div class="content-wrapper-form">

    <!-- Main content -->
    <section class="content">
        <button mat-raised-button color="primary" (click)="onClickNew()"><mat-icon>add</mat-icon>Adicionar</button>
        <p></p>

        <mat-card *ngIf="!sub" class="mat-card-search">
            <mat-card-header>
                <mat-card-title>Filtros de Pesquisa</mat-card-title>
            </mat-card-header>
            <mat-card-content class="form-fields">

## -- [MACRO]
#macro(listXToOneEdit $relation)
			<div class="form-group">
				<app-${relation.toEntity.model.type.toLowerCase()}-autocomplete [(ngModel)]="filters['${relation.to.var}.id'].value" id="$relation.to.var" name="$relation.to.var" 
        			label="${relation.labels.label}" displayfield="#foreach($attr in $relation.toEntity.printerAttributes.flatUp.list)${attr.var}#end"></app-${relation.toEntity.model.type.toLowerCase()}-autocomplete>
            </div>
#end


#foreach($attr in $entity.searchAttributes.flatUp.list)
#if ($attr.isSimplePk() && !$attr.jpa.isManuallyAssigned())
## no need to display it...
#elseif($attr.isSimpleFk())
#listXToOneEdit($attr.getXToOneRelation())
#elseif(!$attr.isVersion())
#if($attr.isInCpk())
#set( $valuePath = "${identifiableProperty.var}.${attr.var}")##
#else
#set( $valuePath = "${attr.var}")##
#end

#if($attr.isTextArea())
                <mat-form-field>
	                <textarea matInput [(ngModel)]="filters['$valuePath'].value" autoResize="true" name="$attr.var" id="$attr.var" ${p}$attr.var="ngModel"
	                	placeholder="$attr.labels.label"></textarea>
				</mat-form-field>
#elseif($attr.isEnum())
				<mat-form-field>
                	<mat-select [(ngModel)]="filters['$valuePath'].value" name="$attr.var" ${p}$attr.var="ngModel" placeholder="$attr.labels.label">
	                    <mat-option *ngFor="let ${attr.var}Option of ${attr.var}Values" [value]="${attr.var}Option.key">{{ ${attr.var}Option.label }}</mat-option>
	                </mat-select>
				</mat-form-field>
#elseif($attr.isEmail())
				<mat-form-field>
	                <input matInput type="email" [(ngModel)]="filters['$valuePath'].value" validateEmail name="$attr.var" id="$attr.var" ${p}$attr.var="ngModel"
	                	placeholder="$attr.labels.label"/>
				</mat-form-field>
#elseif($attr.isUrl())
				<mat-form-field>
	                <input matInput type="url" [(ngModel)]="filters['$valuePath'].value" pattern="^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?" name="$attr.var" id="$attr.var" ${p}$attr.var="ngModel"
	                	placeholder="$attr.labels.label"/>
				</mat-form-field>
#elseif($attr.isString())
				<mat-form-field>
	                <input matInput type="text" [(ngModel)]="filters['$valuePath'].value" name="$attr.var" id="$attr.var" ${p}$attr.var="ngModel"
	                	placeholder="$attr.labels.label"/>
				</mat-form-field>
#elseif($attr.isNumeric())
				<mat-form-field>
	                <input matInput type="number" [(ngModel)]="filters['$valuePath'].value" name="$attr.var" id="$attr.var" ${p}$attr.var="ngModel"
	                	placeholder="$attr.labels.label"/>
				</mat-form-field>
#elseif($attr.isDate() && !$attr.isVersion())
#if($attr.isJavaUtilOnlyDate() || $attr.isLocalDate())
				<mat-form-field>
					<input matInput [matDatepicker]="${attr.var}Picker" [(ngModel)]="filters['$valuePath'].value" name="$attr.var" id="$attr.var" ${p}$attr.var="ngModel"
	                	placeholder="$attr.labels.label"/>
					<mat-datepicker-toggle matSuffix [for]="${attr.var}Picker"></mat-datepicker-toggle>
					<mat-datepicker touchUi ${p}${attr.var}Picker></mat-datepicker>
				</mat-form-field>
#elseif($attr.isLocalDateTime() || $attr.isInstant())
				<mat-form-field>
                    <input matInput [(ngModel)]="filters['$valuePath'].value" name="$attr.var" id="$attr.var" ${p}$attr.var="ngModel"
                    	[owlDateTime]="$attr.var" [owlDateTimeTrigger]="$attr.var" placeholder="$attr.labels.label" />
                    <owl-date-time ${p}$attr.var></owl-date-time>
                </mat-form-field>
#else
                <mat-form-field>
                    <input matInput [(ngModel)]="filters['$valuePath'].value" name="$attr.var" id="$attr.var" ${p}$attr.var="ngModel"
                    	[owlDateTime]="$attr.var" [owlDateTimeTrigger]="$attr.var" placeholder="$attr.labels.label" />
                    <owl-date-time ${p}$attr.var></owl-date-time>
                </mat-form-field>
#end
#elseif($attr.isBoolean())
				<mat-checkbox [(ngModel)]="filters['$valuePath'].value" name="$attr.var" id="$attr.var" ${p}$attr.var="ngModel">${attr.labels.label}</mat-checkbox>
#else
				<mat-form-field>
	                <input matInput type="text" [(ngModel)]="filters['$valuePath'].value" name="$attr.var" id="$attr.var" ${p}$attr.var="ngModel"
	                	placeholder="$attr.labels.label"/>
				</mat-form-field>
#end

#end ##---------- [/NON VERSION]
#end ## foreach(....
            
            </mat-card-content>
            <mat-card-actions>
                <button mat-raised-button color="basic" (click)="onClickSearch()"><mat-icon>search</mat-icon>Pesquisar</button>
            </mat-card-actions>
        </mat-card>

        <p></p>
        <mat-divider></mat-divider>

        <div class="search-results">
        	<!--
            <div class="spinner-container" *ngIf="dataSource.loading$ | async">
                <mat-spinner></mat-spinner>
            </div>
            -->

            <div class="mat-elevation-z8">

                <mat-form-field class="globalFilter">
                    <input matInput placeholder="Filtrar" #searchInput>
                </mat-form-field>

                <mat-table [dataSource]="dataSource" matSort matSortActive="nome" matSortDirection="asc" matSortDisableClear>

## --- Result attributes
#foreach ($attr in $entity.searchResultAttributes.flatUp.list)
	#if(!$attr.isInPk() && !$attr.isFile())
		#if ($attr.hasXToOneRelation())
                	<ng-container matColumnDef="$attr.xToOneRelation.to.var">
                		<mat-header-cell *matHeaderCellDef mat-sort-header>$attr.labels.label.toUpperCase()</mat-header-cell>
                		<mat-cell *matCellDef="let entity">
                			<app-${attr.xToOneRelation.toEntity.model.type.toLowerCase()}-line [entity]="entity"></app-${attr.xToOneRelation.toEntity.model.type.toLowerCase()}-line>
                		</mat-cell>
                	</ng-container>
		#else
			#### CPK support
			#if($attr.isInCpk())
				#set( $valuePath = "entity.${identifiableProperty.var}.${attr.var}")##
			#else
				#set( $valuePath = "entity.${attr.var}")##
			#end
			#####
			#if($attr.isLocalDate())
			        <ng-container matColumnDef="$attr.var">
			            <mat-header-cell *matHeaderCellDef mat-sort-header>$attr.labels.label.toUpperCase()</mat-header-cell>
			            <mat-cell *matCellDef="let entity">{{$valuePath | date:"dd-MM-yyyy" }}</mat-cell>
			        </ng-container>
			#elseif($attr.isLocalDateTime())
			    	<ng-container matColumnDef="$attr.var">
			            <mat-header-cell *matHeaderCellDef mat-sort-header>$attr.labels.label.toUpperCase()</mat-header-cell>
			            <mat-cell *matCellDef="let entity">{{$valuePath | date:"dd-MM-yyyy hh:mm" }}</mat-cell>
			        </ng-container>
			#else
					<ng-container matColumnDef="$attr.var">
			            <mat-header-cell *matHeaderCellDef mat-sort-header>$attr.labels.label.toUpperCase()</mat-header-cell>
			            <mat-cell *matCellDef="let entity">{{$valuePath}}</mat-cell>
			        </ng-container>
			#end
		#end
	#end
#end

                    <ng-container matColumnDef="actions" class="col-actions">
                        <mat-header-cell *matHeaderCellDef>AÇÕES</mat-header-cell>
                        <mat-cell *matCellDef="let entity">
                            <button mat-raised-button color="primary" matTooltip="Ver o registro" (click)="onClickView(entity)">
                                <i class="material-icons">pageview</i>
                                <span class="d-none d-md-inline"> Ver</span>
                            </button>
                            &nbsp;
                            <button mat-raised-button (click)="onClickEdit(entity)">
                                <i class="material-icons">edit</i>
                                <span class="d-none d-md-inline"> Editar</span>
                            </button>
                            &nbsp;
                            <button mat-raised-button (click)="onClickRemove(entity)" color="warn">
                                <i class="material-icons">delete</i>
                                <span class="d-none d-md-inline"> Remover</span>
                            </button>
                        </mat-cell>
                    </ng-container>
                    
                    <mat-header-row *matHeaderRowDef="displayedColumns"></mat-header-row>
                    <mat-row *matRowDef="let row; columns: displayedColumns"></mat-row>

                </mat-table>

                <mat-paginator [length]="dataSource.itemsCount$ | async" [pageSize]="pageSize" [pageSizeOptions]="[10, 25, 100]"></mat-paginator>
            </div>
        </div>

    </section>
    <!-- /.content -->

</div>