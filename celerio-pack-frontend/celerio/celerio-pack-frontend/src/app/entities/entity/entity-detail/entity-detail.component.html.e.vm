$output.file("src/app/entities/${entity.model.type.toLowerCase()}/${entity.model.type.toLowerCase()}-detail/${entity.model.type.toLowerCase()}-detail.component.html")##
<div>

  <!-- Main content -->
  <section class="content">
  <h2>{{ (viewMode ? 'MESSAGE.ENTITY_DETAIL' : 'MESSAGE.ENTITY_NEW') | translate:{'entity':'${entity.labels.label}'} }}</h2>
  
## -- [MACRO]
#macro(xToOneEdit $relation)

                <div class="form-row">
                    <div class="form-group col-md-12">
                        <app-${relation.toEntity.model.type.toLowerCase()}-autocomplete [dropdown]="true" formControlName="${relation.to.var}" id="$relation.to.var"
                            label="${relation.labels.label}" displayfield="${relation.toEntity.printerAttributes.flatUp.list.get(0).var}"
                            [disableControl]="viewMode" #if($relation.isMandatory())[required]="true" #end >
                        </app-${relation.toEntity.model.type.toLowerCase()}-autocomplete>
                    #if($relation.isMandatory())
                
                        <div class="text-danger mt-1" 
                          *ngIf="detailForm.get('${relation.to.var}').required && (detailForm.get('${relation.to.var}').dirty || detailForm.get('${relation.to.var}').touched)">
                          {{'MESSAGE.MANDATORY_FIELD' | translate:{'field':'$relation.labels.label'} }}
                        </div>
                
                    #end
                    </div>
                </div>

#end
#macro(required $attribute)
#if($attribute.isRequired()) required #end
#end
#macro(minlength $attribute)
#if($attribute.columnConfig.hasMin()) minlength="$attribute.columnConfig.min"#end
#end
#macro(maxlength $attribute)
#if($attribute.columnConfig.getSize() > 0) maxlength="$attribute.columnConfig.size"#end
#end
#macro(requiredclass $attribute)
#if($attribute.isRequired()) class="required"#end
#end
#macro(mderror $attribute)

#if($attribute.isRequired())
                        <div class="text-danger mt-1" 
                          *ngIf="detailForm.get('${attribute.var}').required && (detailForm.get('${attribute.var}').dirty || detailForm.get('${attribute.var}').touched)">
                          {{'MESSAGE.MANDATORY_FIELD' | translate:{'field':'$attribute.labels.label'} }}
                        </div>
#end
#if($attribute.columnConfig.hasMin() && $attribute.isString())
                        <div class="text-danger mt-1"
                          *ngIf="detailForm.get('${attribute.var}').errors && detailForm.get('${attribute.var}').errors.minlength 
                            && (detailForm.get('${attribute.var}').dirty || detailForm.get('${attribute.var}').touched)">
                          {{'MESSAGE.MIN_CHAR' | translate:{'field':'$attribute.labels.label', 'numchar':'$attribute.columnConfig.min'} }}
                        </div>
#end
#if($attribute.isString() && $attribute.columnConfig.getSize() > 0)
                        <div class="text-danger mt-1" 
                          *ngIf="detailForm.get('${attribute.var}').errors && detailForm.get('${attribute.var}').errors.maxlength 
                            && (detailForm.get('${attribute.var}').dirty || detailForm.get('${attribute.var}').touched)">
                            {{'MESSAGE.MAX_CHAR' | translate:{'field':'$attribute.labels.label', 'numchar':'$attribute.columnConfig.min'} }}
                        </div>
#end
#if($attribute.isEmail())
                        <div class="text-danger mt-1" 
                          *ngIf="detailForm.get('${attribute.var}').errors && detailForm.get('${attribute.var}').errors.validateEmail
                            && (detailForm.get('${attribute.var}').dirty || detailForm.get('${attribute.var}').touched)">
                          {{'MESSAGE.INVALID_EMAIL' | translate:{'field':'$attribute.labels.label'} }}
                        </div>
#end
#if($attribute.isUrl())
                        <div class="text-danger mt-1" 
                          *ngIf="detailForm.get('${attribute.var}').errors && detailForm.get('${attribute.var}').errors.pattern
                            && (detailForm.get('${attribute.var}').dirty || detailForm.get('${attribute.var}').touched)">
                            {{'MESSAGE.INVALID_URL' | translate:{'field':'$attribute.labels.label'} }}
                        </div>
#end
#end
## -- [/MACROS]
  
    <form class="needs-validation" ngForm *ngIf="entity" [formGroup]="detailForm">
        <div class="card mt-3 shadow-sm">
            <div class="card-body">

## ---------------------------------------------------------
#foreach($attr in $entity.formAttributes.flatUp.list)
#if ($attr.isSimplePk() && !$attr.jpa.isManuallyAssigned())
## no need to display it...
#elseif($attr.isSimpleFk())
#xToOneEdit($attr.getXToOneRelation())
#elseif(!$attr.isVersion())
#if($attr.isInCpk())
#set( $valuePath = "${identifiableProperty.var}.${attr.var}")##
#else
#set( $valuePath = "${attr.var}")##
#end
                <div class="row">
                    <div class="form-group col-md-12">
#if($attr.isPassword())
                        <label for="$attr.var">{{'${entity.model.type.toUpperCase()}.$attr.var.toUpperCase()' | translate}}</label>
                        <input class="form-control" type="password" #required($attr) #minlength($attr) #maxlength($attr)
                          formControlName="$valuePath" id="$attr.var" [disableControl]="viewMode"
                          [class.is-invalid]="detailForm.get('${attr.var}').invalid && (detailForm.get('${attr.var}').dirty || detailForm.get('${attr.var}').touched)" />
                        #mderror($attr)
#elseif($attr.isHtml())
					<!-- TODO -->
                todo html
#elseif($attr.isTextArea() && $attr.getSize() > 255)
                        <label for="$attr.var">{{'${entity.model.type.toUpperCase()}.$attr.var.toUpperCase()' | translate}}</label>
                        <textarea class="form-control" autoResize="true" 
                          #required($attr) #minlength($attr) #maxlength($attr)
                          formControlName="$valuePath" id="$attr.var" [disableControl]="viewMode"
                          [class.is-invalid]="detailForm.get('${attr.var}').invalid && (detailForm.get('${attr.var}').dirty || detailForm.get('${attr.var}').touched)">
                        </textarea>
                        #mderror($attr)
#elseif($attr.isEnum())
                        <label>{{'${entity.model.type.toUpperCase()}.$attr.var.toUpperCase()' | translate}}</label>
                        <div>
                        	<fieldset [class.is-invalid]="detailForm.get('${attr.var}').invalid && (detailForm.get('${attr.var}').dirty || detailForm.get('${attr.var}').touched)">
                            <div class="custom-control custom-radio custom-control-inline" *ngFor="let ${attr.var}Option of cacheEnums['${attr.enumModel.type}']; let i = index">
                              <input type="radio" class="custom-control-input" #required($attr)
                                id="{{'${attr.var}Option' + i}}" [disableControl]="viewMode"
                                [value]="${attr.var}Option.key" formControlName="$attr.var">
                              <label class="custom-control-label" for="{{'${attr.var}Option' + i}}">{{ ${attr.var}Option.label }}</label>
                            </div>
                          </fieldset>
                          #mderror($attr)
                        </div>
#elseif($attr.isEmail())
                        <label for="$attr.var">{{'${entity.model.type.toUpperCase()}.$attr.var.toUpperCase()' | translate}}</label>
                        <input class="form-control" type="email" #required($attr) #minlength($attr) #maxlength($attr)
                          formControlName="$valuePath" id="$attr.var" [disableControl]="viewMode"
                          [class.is-invalid]="detailForm.get('${attr.var}').invalid && (detailForm.get('${attr.var}').dirty || detailForm.get('${attr.var}').touched)" />
                        #mderror($attr)
#elseif($attr.isUrl())
                        <label for="$attr.var">{{'${entity.model.type.toUpperCase()}.$attr.var.toUpperCase()' | translate}}</label>
                        <input class="form-control" type="url" #required($attr) #minlength($attr) #maxlength($attr)
                          pattern="^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?"
                          formControlName="$valuePath" id="$attr.var" [disableControl]="viewMode"
                          [class.is-invalid]="detailForm.get('${attr.var}').invalid && (detailForm.get('${attr.var}').dirty || detailForm.get('${attr.var}').touched)"/>
                        #mderror($attr)
#elseif($attr.isString())
                        <label for="$attr.var">{{'${entity.model.type.toUpperCase()}.$attr.var.toUpperCase()' | translate}}</label>
                        <input class="form-control" type="text" #required($attr) #minlength($attr) #maxlength($attr)
                          formControlName="$valuePath" id="$attr.var" [disableControl]="viewMode"
                          [class.is-invalid]="detailForm.get('${attr.var}').invalid && (detailForm.get('${attr.var}').dirty || detailForm.get('${attr.var}').touched)"/>
                        #mderror($attr)
#elseif($attr.isNumeric())
                        <label for="$attr.var">{{'${entity.model.type.toUpperCase()}.$attr.var.toUpperCase()' | translate}}</label>
                        <input class="form-control" type="number" #required($attr)
                          formControlName="$valuePath" id="$attr.var" [disableControl]="viewMode"
                          [class.is-invalid]="detailForm.get('${attr.var}').invalid && (detailForm.get('${attr.var}').dirty || detailForm.get('${attr.var}').touched)"/>
                        #mderror($attr)
#elseif($attr.isDate() && !$attr.isVersion())
#if($attr.isJavaUtilOnlyDate() || $attr.isLocalDate())
                        <label for="$attr.var">{{'${entity.model.type.toUpperCase()}.$attr.var.toUpperCase()' | translate}}</label>
                        <app-datetime-picker formControlName="$valuePath" #required($attr) [id]="'$attr.var'"
                            placement="bottom-left" [disabledMode]="viewMode"></app-datetime-picker>
#elseif($attr.isLocalDateTime() || $attr.isInstant())
                        <label for="$attr.var">{{'${entity.model.type.toUpperCase()}.$attr.var.toUpperCase()' | translate}}</label>
                        <app-datetime-picker formControlName="$valuePath" #required($attr) [id]="'$attr.var'" [timePicker]="true"
                            placement="bottom-left" [disabledMode]="viewMode"></app-datetime-picker>
#else
                        <label for="$attr.var">{{'${entity.model.type.toUpperCase()}.$attr.var.toUpperCase()' | translate}}</label>
                        <app-datetime-picker formControlName="$valuePath" #required($attr) [id]="'$attr.var'" [timePicker]="true"
                            placement="bottom-left" [disabledMode]="viewMode"></app-datetime-picker>
#end
#elseif($attr.isBoolean())
                        <input class="custom-control-input" type="checkbox" 
                          formControlName="$valuePath" id="$attr.var" [disableControl]="viewMode" />
                        <label for="$attr.var">${attr.labels.label}</label>
#elseif($attr.isFile() && $attr.filename)
					<!-- TODO -->
                <ul *ngIf="entity.${attr.filename.var}">
                    <li><a href="{{ getApiUrl() + '/' + entity.${identifiableProperty.var} + '/${attr.var}/download' }}">Download {{entity.${attr.filename.var}}}</a></li>
                    <li>Content-Type: {{entity.${attr.fileContentType.var}}}</li>
                    <li>{{'MESSAGE.LENGTH_IN_BYTES' | translate}} {{entity.${attr.fileSize.var}}}</li>
                </ul>

                <p-fileUpload *ngIf="entity.${identifiableProperty.var}" name="${attr.var}" url="{{ getApiUrl() + '/' + entity.${identifiableProperty.var} + '/${attr.var}/upload' }}" (onUpload)="on${attr.varUp}Upload(${d}event)" >
                </p-fileUpload>
                <p *ngIf="!entity.${identifiableProperty.var}">
                	{{'MESSAGE.SAVE_BEFORE_UPLOAD' | translate}}
                </p>
#else

                        <label for="$attr.var">{{'${entity.model.type.toUpperCase()}.$attr.var.toUpperCase()' | translate}}</label>
                        <input class="form-control" type="text" formControlName="$valuePath" #required($attr)
                            id="$attr.var" [disableControl]="viewMode"/>
                        #mderror($attr)
#end
                    </div>
                </div>
#end ##---------- [/NON VERSION]
#end ## foreach(....
## ---------------------------------------------------------
                <div class="row mt-3">
                    <div class="col align-self-start">
                        <button class="btn btn-outline-secondary mr-2" *ngIf="sub" (click)="onClickCancel()">
                            <i class="fas fa-times"></i> {{'LABEL.CANCEL' | translate}}
                        </button>
    
                        <button class="btn btn-primary mr-2" (click)="onClickSave()" [disableControl]="detailForm.invalid || viewMode">
                            <i class="fas fa-check"></i> {{'LABEL.SAVE' | translate}}
                        </button>
                        <button class="btn btn-outline-secondary mr-2" *ngIf="!sub" (click)="onClickBack()">
                                <i class="fas fa-angle-left"></i> {{'LABEL.BACK' | translate}}
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </form>
##
## TABS FOR RELATIONS
##
#if($entity.inverseOneToOne.flatUp.size > 0 || $entity.oneToMany.flatUp.size > 0 || $entity.manyToMany.flatUp.size > 0)
##    <mat-card *ngIf="entity && entity.$identifiableProperty.var">
##    	<mat-card-subtitle>$entity.model.type relacionamentos</mat-card-subtitle>
##    	<mat-card-content>
##    		<mat-tab-group>
#end
#foreach ($relation in $entity.inverseOneToOne.flatUp.list)
##		        <mat-tab label="$relation.to.varsUp">
##		            <app-${relation.toEntity.model.type.toLowerCase()}-list [$relation.from.var]="entity" sub="true"></app-${relation.toEntity.model.type.toLowerCase()}-list>
##		        </mat-tab>
#end
#foreach ($relation in $entity.oneToMany.flatUp.list)
##		        <mat-tab label="$relation.to.varsUp">
##		            <app-${relation.toEntity.model.type.toLowerCase()}-list *ngIf="show$relation.to.varsUp" [$relation.from.var]="entity" sub="true" [header]="'$relation.to.varsUp of this $entity.model.var'" (addNewClicked)="show$relation.to.varsUp = false"></app-${relation.toEntity.model.type.toLowerCase()}-list>
##		            <app-${relation.toEntity.model.type.toLowerCase()}-detail *ngIf="!show$relation.to.varsUp" [$relation.from.var]="entity" sub="true" (saveClicked)="show$relation.to.varsUp = true" (cancelClicked)="show$relation.to.varsUp = true"></app-${relation.toEntity.model.type.toLowerCase()}-detail>
##		        </mat-tab>
#end
#foreach ($relation in $entity.manyToMany.flatUp.list)
##		        <mat-tab label="$relation.to.varsUp">
##		            <p-pickList [source]="source$relation.to.varsUp" [target]="entity.$relation.to.vars" sourceHeader="Disponíveis" targetHeader="Selecionados" [responsive]="true">
##		                <ng-template let-$relation.to.var pTemplate="item">
#foreach($attr in $relation.toEntity.printerAttributes.flatUp.list){{ ${relation.to.var}.${attr.var} }} #end
##		                </ng-template>
##		            </p-pickList>
##		        </mat-tab>
#end

#if($entity.inverseOneToOne.flatUp.size > 0 || $entity.oneToMany.flatUp.size > 0 || $entity.manyToMany.flatUp.size > 0)
##    		</mat-tab-group>
##    	</mat-card-content>
##    </mat-card>
#end
  </section>
  <!-- /.content -->
</div>